import java.nio.file.Files

buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

def mcVersion = "1.12.2"
def forgeVersion = "14.23.0"
def mappingsVersion = "20171003"
def pl3xVersion = "39"
def build = System.getenv()['BUILD_NUMBER'] ?: "SNAPSHOT"
version = "1.4.0-b" + build

group = "net.pl3x.forge"
archivesBaseName = "Pl3x"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = mcVersion + "-" + forgeVersion + ".0"
    runDir = "run"

    replace "@DEV_BUILD@", project.version
    replaceIn "Pl3x.java"

    mappings = "snapshot_" + mappingsVersion
    makeObfSourceJar = false
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task setupPl3xForge {
    group = "forgegradle"
    description = "Download the Pl3xForge userdev file for ForgeGradle"
    doFirst {
        println "Checking directory structures..."
        def pl3xDir = new File(System.getProperty("user.home"), ".gradle" + File.separator + "pl3x")
        if (!pl3xDir.exists()) {
            println "Missing pl3x directory. Creating..."
            pl3xDir.mkdirs()
        }
        def userdevDir = new File(System.getProperty("user.home"), ".gradle" + File.separator + "caches" + File.separator + "minecraft" +
                File.separator + "net" + File.separator + "minecraftforge" + File.separator + "forge" + File.separator +
                mcVersion + "-" + forgeVersion + ".0" + File.separator + "snapshot" + File.separator + mappingsVersion)
        if (!userdevDir.exists()) {
            println "Missing userdev directory. Creating..."
            userdevDir.mkdirs()
        }
        println "Checking userdev files..."
        def userdevFile = new File(userdevDir, "forge-" + (String) project.minecraft.version + "-" + forgeVersion + ".0-userdev.jar")
        def tmpFile = new File(pl3xDir, "forge-" + mcVersion + "-" + forgeVersion + "." + pl3xVersion + "-userdev.jar")
        if (!tmpFile.exists() || !userdevFile.exists()) {
            println "Downloading missing Pl3xForge userdev jar (build " + pl3xVersion + ")..."
            new URL("http://pl3x.net/jenkins/job/MinecraftForge/" + pl3xVersion +
                    "/artifact/build/distributions/forge-" + mcVersion + "-" + forgeVersion + "." + pl3xVersion + "-userdev.jar")
                    .withInputStream { i -> tmpFile.withOutputStream { it << i } }
            println "Preparing Pl3xForge jar (build " + pl3xVersion + ")..."
            for (File f : userdevDir.listFiles()) {
                f.delete()
            }
            Files.copy(tmpFile.toPath(), userdevFile.toPath())
        }
        println "Everything up to date!"
        println ""
        println "Please run setupDecompWorkspace task now."
    }
}
